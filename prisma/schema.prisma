generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  useDecimalJs          = "true"
  modelCase             = "PascalCase"
  relationModel         = "true"
  modelSuffix           = "Model"
  prismaJsonNullability = "true"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model AssetType {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String   @unique
}

model Asset {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  name       String
  typeId     Int
  schedules  Schedule[]
  employeeId Int
  employee   Employee   @relation(fields: [employeeId], references: [employeeId])
}

model Plan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String   @unique
  sites     String?  @db.NVarChar(Max)
  map       String?  @db.NVarChar(Max)
}

model Schedule {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  assetId      Int
  employeeId   Int
  startDate    DateTime
  endDate      DateTime? // Make this optional
  scheduleType String
  asset        Asset     @relation(fields: [assetId], references: [id], onUpdate: NoAction)
  employee     Employee  @relation(fields: [employeeId], references: [employeeId], onUpdate: NoAction)
  days         Day[]     @relation("scheduleToDay")
}

model Day {
  id         Int      @id @default(autoincrement())
  dayOfWeek  String
  scheduleId Int
  schedule   Schedule @relation("scheduleToDay", fields: [scheduleId], references: [id])

  @@unique([dayOfWeek, scheduleId])
}

model Employee {
  employeeId        Int        @id @unique
  name              String
  yearsExperience   Int? // nullable because it can be null
  joinedOn          DateTime
  imagePath         String?
  employeeCode      String
  designationName   String
  checkedInAt       DateTime?
  checkedOutAt      DateTime?
  currentWeekHours  Int?
  lastWeekHours     Int?
  modifiedTimeStamp Int?
  statusType        String?
  statusReason      String?
  assets            Asset[]
  schedules         Schedule[]
}
